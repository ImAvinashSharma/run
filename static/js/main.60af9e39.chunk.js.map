{"version":3,"sources":["defaultStubs.js","Editor.js","App.js","index.js"],"names":["stubs","Editor","props","language","value","onChange","onBeforeChange","editor","data","showHint","completeSingle","options","tabSize","lineWrapping","lint","mode","theme","fixedGutter","foldGutter","lineNumbers","autoCloseTags","autoCloseBrackets","matchBrackets","smartIndent","extraKeys","autoRefresh","App","useState","code","setCode","setLanguage","output","setOutput","input","setInput","status","setStats","jobId","setjobId","jobDetails","setJobDetails","useEffect","defaultLanguage","localStorage","getItem","handleSubmit","a","payload","axios","post","intervalId","setInterval","get","params","id","dataRes","success","job","error","jobStatus","jobOutput","clearInterval","console","log","response","errMsg","className","style","width","e","window","confirm","target","onClick","setItem","rows","cols","submittedAt","startedAt","completedAt","result","moment","toString","start","diff","renderTimeDetails","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60af9e39.chunk.js","sourcesContent":["const stubs = {};\n\nstubs.cpp = `#include <iostream>\nusing namespace std;\n\nint main() {\n\tcout<<\"Hello world\";\n\treturn 0;\n}\n`;\n\nstubs.c = `#include <stdio.h>\n\nint main() {\n\tprintf(\"Hello world\");\n\treturn 0;\n}\n`;\n\nstubs.py = `print(\"Hello world\")`;\n\nexport default stubs;\n","import React from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/monokai.css\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport \"codemirror/addon/edit/closetag\";\nimport \"codemirror/addon/fold/foldcode\";\nimport \"codemirror/addon/hint/show-hint.css\";\nimport \"codemirror/addon/hint/show-hint.js\";\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/lint/lint\";\nimport \"codemirror/addon/display/autorefresh\";\n\n// import \"codemirror/addon/hint/python-hint\";\n\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nfunction Editor(props) {\n  let { language, value, onChange } = props;\n  switch (language) {\n    case \"py\":\n      language = \"text/x-python\";\n      break;\n    case \"c\":\n      language = \"text/x-csrc\";\n      break;\n    case \"cpp\":\n      language = \"text/x-c++src\";\n      break;\n    default:\n      language = \"\";\n      break;\n  }\n  const handleChange = (editor, data, value) => {\n    onChange(value);\n    editor.showHint({ completeSingle: false });\n  };\n  return (\n    <div>\n      <CodeMirror\n        value={value}\n        onBeforeChange={handleChange}\n        options={{\n          tabSize: 4,\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: \"monokai\",\n          fixedGutter: true,\n          foldGutter: true,\n          lineNumbers: true,\n          autoCloseTags: true,\n          autoCloseBrackets: true,\n          matchBrackets: true,\n          smartIndent: true,\n          extraKeys: {\n            \"Ctrl-Space\": \"autocomplete\"\n          },\n          autoRefresh: true\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Editor;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport stubs from \"./defaultStubs\";\nimport Editor from \"./Editor\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [code, setCode] = useState(\"\");\n  const [language, setLanguage] = useState(\"cpp\");\n  const [output, setOutput] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const [status, setStats] = useState(\"\");\n  const [jobId, setjobId] = useState(\"\");\n  const [jobDetails, setJobDetails] = useState(null);\n  useEffect(() => {\n    const defaultLanguage = localStorage.getItem(\"defaultLanguage\") || \"cpp\";\n    setLanguage(defaultLanguage);\n  }, []);\n  useEffect(() => {\n    setCode(stubs[language]);\n  }, [language]);\n  const setDefaultLanguage = () => {\n    localStorage.setItem(\"defaultLanguage\", language);\n  };\n  const handleSubmit = async () => {\n    const payload = {\n      language,\n      code,\n      input\n    };\n    try {\n      setjobId(\"\");\n      setStats(\"\");\n      setOutput(\"\");\n      const { data } = await axios.post(\"http://localhost:8080/run\", payload);\n      setjobId(data.jobId);\n      let intervalId;\n      intervalId = setInterval(async () => {\n        const { data: dataRes } = await axios.get(\"http://localhost:8080/status\", { params: { id: data.jobId } });\n        const { success, job, error } = dataRes;\n        if (success) {\n          const { status: jobStatus, output: jobOutput } = job;\n          setStats(jobStatus);\n          setJobDetails(job);\n          if (jobStatus === \"pending\") return;\n          setOutput(jobOutput);\n          clearInterval(intervalId);\n        } else {\n          setStats(\"Error: Please retry\");\n          console.log(error);\n          setOutput(error);\n          clearInterval(intervalId);\n        }\n      }, 1000);\n    } catch ({ response }) {\n      if (response) {\n        const errMsg = response.data;\n        setOutput(errMsg);\n      } else {\n        setOutput(\"Error Connecting to server\");\n      }\n    }\n  };\n  const renderTimeDetails = () => {\n    if (!jobDetails) {\n      return \"\";\n    }\n    let { submittedAt, startedAt, completedAt } = jobDetails;\n    let result = \"\";\n    submittedAt = moment(submittedAt).toString();\n    result += `Job Submitted At: ${submittedAt}  `;\n    if (!startedAt || !completedAt) return result;\n    const start = moment(startedAt);\n    const end = moment(completedAt);\n    const diff = end.diff(start, \"seconds\", true);\n    result += `Execution Time: ${diff}s`;\n    return result;\n  };\n  return (\n    <div className=\"main\">\n      <h1>Online Code Compiler</h1>\n      <div className=\"language\">\n        <i>Language:</i>\n        <select\n          className=\"custom-select\"\n          style={{ width: \"80px\" }}\n          value={language}\n          onChange={e => {\n            let shouldSwitch = window.confirm(\"Are you sure you want to change language? WARNING: Your current code will be lost.\");\n            if (shouldSwitch) {\n              setLanguage(e.target.value);\n            }\n          }}\n        >\n          <option value=\"cpp\">C++</option>\n          <option value=\"c\">C</option>\n          <option value=\"py\">Python</option>\n        </select>\n        <button className=\"btn btn-set\" onClick={setDefaultLanguage}>\n          Set Default\n        </button>\n      </div>\n      <div className=\"codeEditor\">\n        <Editor language={language} value={code} onChange={setCode} />\n      </div>\n      <br />\n      <div className=\"inout\">\n        <div>\n          <h3>Input</h3>\n          <textarea\n            rows=\"8\"\n            cols=\"25\"\n            value={input}\n            onChange={e => {\n              setInput(e.target.value);\n            }}\n          ></textarea>\n        </div>\n        <div>\n          {output && <h3>Output</h3>}\n          <p>{output}</p>\n          <p>{jobId && `JobId ${jobId}`}</p>\n          <p>{renderTimeDetails()}</p>\n          <p>{status}</p>\n        </div>\n      </div>\n      <div className=\"submit\">\n        <button className=\"btn btn-primary\" onClick={handleSubmit}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}